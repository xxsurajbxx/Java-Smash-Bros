import xxsurajbxx.game.*;import java.awt.image.BufferedImage;import java.awt.Color;import java.awt.Stroke;import java.awt.Font;import java.awt.BasicStroke;import java.awt.Graphics;import java.awt.Graphics2D;//add knockback and a winner screen at the end once any of the characters reach 0 or below health//also add sasuke spritespublic class xxJavaSmashBros extends Game {    public static final byte JUMP_FALL_SPEED=40;    public static final byte WALK_SPEED=5;    public static final byte SPRINT_SPEED=10;    public static final int LOWER_BOUND=300;    public static Player p1;    public static Player p2;    public GameFrame frame;    public InputHandler inpt;    public MyPanel panel;    public static void main(String args[]) {        new xxJavaSmashBros(800, 450, "xxJavaSmashBros", 30);    }    private class MyPanel extends GamePanel {        public void paintComponent(Graphics g) {            super.paintComponent(g);            Graphics2D g2 = (Graphics2D)g;            switch(GSM.getState()) {                case GSM.START:                Font defaultFont = g2.getFont();                g2.setFont(new Font("Times", Font.PLAIN, 40));                g2.drawString("Java Smash Bros", 225, 75);                g2.setFont(defaultFont);                g2.setColor(Color.BLACK);                Stroke defaultStroke = g2.getStroke();                g2.setStroke(new BasicStroke(5));                g2.drawRect(200, 125, 400, 200);                g2.setFont(new Font("Times", Font.PLAIN, 30));                g2.drawString("Start", 375, 225);                g2.setFont(defaultFont);                break;                case GSM.CHARACTER_SELECT:                g2.setFont(new Font("Times", Font.PLAIN, 40));                g2.drawString("Java Smash Bros", 225, 75);                defaultFont = g2.getFont();                g2.setFont(defaultFont);                g2.setColor(Color.BLACK);                g2.setStroke(new BasicStroke(5));                g2.drawRect(100, 175, 200, 100);                g2.drawRect(500, 175, 200, 100);                g2.setFont(new Font("Times", Font.PLAIN, 30));                g2.drawString("Naruto", 110, 170);                g2.drawString("Sasuke", 510, 170);                g2.setFont(defaultFont);                break;                case GSM.RUNNING:                //draw the background                //g2.drawImage();                switch(p1.orientation) {                    case 1:                    g2.drawImage(p1.getFrame(), p1.x, p1.y, p1.getFrameInfo().width, p1.getFrameInfo().height, null);                    break;                    case -1:                    g2.drawImage(p1.getFrame(), p1.x+p1.getFrameInfo().width, p1.y, -p1.getFrameInfo().width, p1.getFrameInfo().height, null);                    break;                }                switch(p2.orientation) {                    case 1:                    g2.drawImage(p2.getFrame(), p2.x, p2.y, p2.getFrameInfo().width, p2.getFrameInfo().height, null);                    break;                    case -1:                    g2.drawImage(p2.getFrame(), p2.x+p2.getFrameInfo().width, p2.y, -p2.getFrameInfo().width, p2.getFrameInfo().height, null);                    break;                }                p1.drawThrowables(g);                p2.drawThrowables(g);                byte animationNumber = p1.getAnimation();                SpriteSheet.Sprite currentSprite = p1.getFrameInfo();                for(byte x : p1.dmgAnimations) {                    if(animationNumber==x) {                        for(SpriteSheet.Sprite y : p1.dmgFrames) {                            if(currentSprite==y) {                                if((p1.orientation==1&&p1.x+15>=p2.x-p2.hitBoxWidth)||(p1.orientation==-1&&p1.x-15<=p2.x+p2.hitBoxWidth)) {                                    p2.health--;                                }                            }                        }                        break;                    }                }                animationNumber = p2.getAnimation();                currentSprite = p2.getFrameInfo();                for(byte x : p2.dmgAnimations) {                    if(animationNumber==x) {                        for(SpriteSheet.Sprite y : p2.dmgFrames) {                            if(currentSprite==y) {                                if((p2.orientation==1&&p2.x+15>=p1.x-p1.hitBoxWidth)||(p2.orientation==-1&&p2.x-15<=p1.x+p1.hitBoxWidth)) {                                    p1.health--;                                }                            }                        }                        break;                    }                }                p1.kunaiCollisions(p2);                p2.kunaiCollisions(p1);                drawHealthBar(g);                break;            }        }        private void drawHealthBar(Graphics g) {            g.setColor(Color.RED);            g.fillRect(25, 25, 200, 15);            g.setColor(Color.GREEN);            g.fillRect(25, 25, (int)(p1.health*2), 15);            g.setColor(Color.RED);            g.fillRect(575, 25, 200, 15);            g.setColor(Color.GREEN);            g.fillRect(575+(int)(200-(2*p2.health)), 25, (int)(p2.health*2), 15);        }    }    public xxJavaSmashBros(int width, int height, String title, int fps) {        super(width, height, title, fps);        GSM.setState(GSM.START);        panel = new MyPanel();        inpt = new InputHandler();        frame = new GameFrame(width, height, title, panel, inpt);        start();    }    public void update() {        if(GSM.getState()==GSM.RUNNING) {            p1.update();            p2.update();        }        panel.repaint();    }}